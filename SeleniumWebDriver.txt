PageObject pattern:
Every page in UI application will have a corresponding Java Page Class and Test Class.
Main advantage of PageObject pattern is clear separation of testcases which helps for easy maintenance.
Also it avoids code redundancy.

Page classes - have the logic to identify the WebElement and return back the actual value/elements needed for assertions.
TestClasses -  assertions 


HomePage- test navigations manu, header links, search box,click signin, register....
SearchResultsPage- test the no of results, valid reslts, sort features(by rating, price), filters...
SearchDetailsPage-
AddToCartPage


HomePageTest
SearchResultsPageTest
SearchDetailsPageTest
AddToCartPageTest

***********************
maven,git, jenkins

maven- pom.xml (maven with TestNG)
git/svn/pvcs- code repository
TestNG- testng.xml

*****************************

WebDriver:

get
findElement
findElements
getTitle

close - close the browser 
quit
windowhandle
windowhandles

WebElement:

click- we can click on link or button
sendKeys- to send/input text into the text boxes
getText()- to get inner text of an element

getAttribute
isSelected
isEnabled
isDisplayed

DropDowns:
Select
selectByIndex
selectByVisibleText
selectByValue



**********************

go to kp.org
click on search button
select doctors from dropdown and enter doctors in search box - click search button
searchResults

***********
3 packages:
com.wbl.page
com.wbl.base
com.wbl.test

created 3 page classes, 3 test classes, 1 BaseTest Class
PAgeclasses- lgoic to identify elements , page classes need driver- which we injected by using construtcor
TestClasses - we have to call page class methods and add assertions once we get actual,to call page classes we should pass driver object
which we inherit from BaseTest
BaseTest- we created driver using BeforeClass annotation

https://github.com/medhawbl/MayClassDocs
https://github.com/medhawbl/MayClassCode
****************
Thread.sleep(3000);// by default pause program execution

element is loaded immediately
its taking time to load the element 


Waits:

ImplicitWait: implicit wait waits for any of the element that takes time to load in webpage/poll the DOM.
default is 0 seconds.

driver.manage().timeouts().implicitlWait(20, TimeUnit.SEONDS);

It wil initially check if the element is present , if its found then it will not wait for given wait time 20secoonds
if it is not found 0 then it waits for complete wait time(eg:20seconds) even though element is avaialble within 10 or 15 seconds.

Meaning which it checks first at 0th sec and after 20 seconds- not in between


ExplicitWait:
It waits for a specific element or condition
		
		WebDriverWait wait = new WebDriverWait(driver,30);
		element =wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector(".prime-button-try>a")));
		element.click();
		
It wil initially check if the element is present , if its found then it will not wait for given wait time(20secoonds)

if it is not found at 0th sec then it starts waiting for given waittime
but it keeps checking in between by default for every 500ms if element is found- if it is found then it will not wait for entire time
20seconds
0th
500ms
.....
10th sec or 15th sec - 

Fluent Wait: 
is s type of explicit wait where we have option o override the polling/frequency time
and we have other option like ignoringException...

both explicit wait and fluent wait have method - wait.until- which accepts
ExpectedConditions, Function and Predicate.
Predicate(I) has apply method where output is always boolean and any input type
but in function(I) you can have your own output and input types in method.




Actions:
mouse hover
moveTo
perform

right click
drag and drop


navigate:
to
back
forward
refresh

***************
Headless browsers:

HtmlUnitDriver
PhantomJs....




Assignment:
Facebook- registration form submission
Amazon - go to Accounts&Lists and click on SignIn


hidden element example
delete cookie

css seletors
DesiredCapabilities
FIleUpload
Tables
datepicker
*****************************
css selector:


[id='idValue'] or #idvalue
[class='classValue'] or .classValue
[name='nameValue']
[attributeName='attributeValue']

#fblogin>button - direct child
#fblogin i - any child

#bUYZ-origin
#c_86m-origin

[id^='a71V']- starts-with
[id$='a71V']- end-with
[id*='a71V']- contains


[attributename^='attributevalue']- starts-with

[attributename$='attributevalue']]- end-with

[attributename*='attributevalue']- contains

.pull-right.social-icons li:nth-child(3)

.pull-right.social-icons li:nth-of-type(3)


sibling -- +
.logo.col-md-4.col-sm-4+div

https://saucelabs.com/resources/articles/selenium-tips-css-selectors


xpath:

absolute xpath: traverse from the root of the html document all the way to the element,
It is lengthy.
It is not preferred bcz it is complex and if any new elements ar added or deleted in betweenwe need to
again modify our locator.

/html/body/header/div/div/button....

/html/body/header/div[2]/div/ul/li[1]/a/button

relative xpath: Directly identify the element by using its attribute values.
It is shorter than absolute xpath

//*[@attrname='attrvalue']

//*[@id='headerfblogin']

//*[starts-with(@id,'header')]
//*[contains(@id,'header')]

//*[contains(text(),'hear')] - to identify element using inner text of the element

//*[starts-with(@attrbutename,'attrvalue')]

//div[@id='navbar-collapse']/ul/li[3]

.//*[@class='hidden-xs top-bar']/following::div[1]
.//*[@class='header-main container']/preceding::div[2]

//*[@class='logo col-md-4 col-sm-4']/following-sibling::div
//*[@class='logo col-md-4 col-sm-4']/preceding-sibling::div

xpath- xpath is complex to write 
we can traverse forward and also backward in a dom using xpath
we can isentify the lement using its inner text als0 if required by using text()
which we cannot do in css selectors

css selectors- is simple, easier, faster and more cross browser compatable.
we can traverse only forward in a dom using css selector
****************************************
FileUpload- 

windows based interactions as part of web application
selenium cannot handle desktop based interactions.
 
we can handle desktop based interactions using
1. Autoit 
2. Robot class(java.awt)

https://www.autoitscript.com/site/autoit/

download autoit

part1: script to handle desltop file upload interactions
to learn about autoit framework methods use-  C:\Program Files (x86)\AutoIt3\AutoIt help file
open C:\Program Files (x86)\AutoIt3\Au3Info_x64 - which is finder tool(like firepath)
open C:\Program Files (x86)\AutoIt3\SciTE\sciTE- text editor- type the code and save as autoit file,
then compile to generate .exe
 
part2: embed the script with web application using selenium
Once .exe is ready - we wil use this in selenium automation script












